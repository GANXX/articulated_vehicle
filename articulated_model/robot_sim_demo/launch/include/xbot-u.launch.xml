<launch>

  <arg name="x" default="5.0" />
  <arg name="y" default=".0" />
  <arg name="z" default="0.0" />
  <arg name="yaw" default="-2.0" />

  <!-- Setup controllers -->
  <!-- rosparam file="$(find fetch_gazebo)/param/freight_controllers.yaml" command="load" / -->

  <!-- URDF and TF support -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find robot_sim_demo)/urdf/robot.xacro" />
  <!-- Put a robot in gazebo, make it look pretty -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" 
        args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -Y $(arg yaw) -model xbot-u -param robot_description"/>

  <!--node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="false"/>
  </node-->

  <!--Load the joint controllers to param server-->
  <rosparam file="$(find robot_sim_demo)/param/xbot-u_control.yaml" command="load"/>

  <!--Load controllers-->
  <node name="spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" ns="/xbot" args="joint_state_controller
    yaw_platform_position_controller
    pitch_platform_position_controller
    left_wheel_velocity_controller
    right_wheel_velocity_controller
    articulate_controller
    "/>  <!--mobile_base_controller-->


  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" ns="/xbot" respawn="false" output="screen">
    <param name="publish_frequency" value="20.0"/>
  </node>

  <!--启动左右轮转速的控制器-->
  <node name="wheel_velocity_transform" pkg="pid" type="transform_output" output="screen">
      <remap from="right_wheel_v" to="xbot/right_wheel_velocity_controller/command"/>
      <remap from="left_wheel_v" to="xbot/left_wheel_velocity_controller/command"/>
  </node>
  <!-- Publish base_scan_raw if anything subscribes to it -->
  <!--node name="publish_base_scan_raw" pkg="topic_tools" type="relay" args="base_scan base_scan_raw" >
    <param name="lazy" type="bool" value="True"/>
  </node-->

  <!-- Start a mux between application and teleop, but the switch must be called by service rather than automatically -->
  <!--<node pkg="topic_tools" type="mux" name="cmd_vel_mux" respawn="true" args="/cmd_vel /cmd_vel_mux/input/teleop /cmd_vel_mux/input/navi">
    <remap from="mux" to="cmd_vel_mux"/>
  </node>-->

  <!-- To make the interface of simulation identical to real XBot -->
  <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager">
  </node>
  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"  args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find robot_sim_demo)/param/mux.yaml"/>
    <remap from="cmd_vel_mux/output/cmd_vel" to="cmd_vel_for_control"/>
  </node>


</launch>
